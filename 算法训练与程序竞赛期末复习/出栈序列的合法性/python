m, n, k = map(int, input().split())
while k > 0:
    k -= 1
    l = list(map(int, input().split()))
 
    # 第一个出栈的数为l[0]说明此时栈中已经有[1,l[0]]
    if l[0] > m:  # l[0] > m说明此时已经爆栈，直接输出NO
        print("NO")
        continue
    now = [i for i in range(1, l[0] + 1)]  # 储存当先栈中元素
    max_num = l[0]  # 标记当前栈中的最大数
 
    for x in l:
        if not now and x == now[-1]:  # 如果当前栈非空并且栈顶为x，x出栈
            now.pop()
        elif x < max_num:  # 如果x比当前栈中的最大数小，说明大的数先入栈了，当前序列不是合法序列，输出NO
            print("NO")
            break
        else:
            # 计算x与当前栈中最大数的差值，如果小于栈剩余的空间，一定会爆栈，输出NO
            if x - max_num > m - len(now):
                print("NO")
                break
            now += [i for i in range(max_num + 1, x + 1)]  # 不会爆栈则进行入栈操作
            now.pop()  # 栈顶元素（即x）出栈
            max_num = x  # 更新栈中元素的最大值
    else:
        print("YES")
